opencv를 활용하여

1. 이미지를 입력 받아 정상적으로 전처리

2. 전처리한 영상을 기반으로 숫자 검출

3. 숫자 검출한 것으로 train data를 구축

4. train data를 기반으로 학습

5. 학습 된 데이터를 기반으로 입력 이미지 예측

이러한 과정을 내 손으로 직접 구현하였다.

주어진 number 1 ~ 5 같은 경우는 비슷한 형태의 데이터라

전처리만 정상적으로 되면 정상적으로 예측되어서 안심하였다.

하지만 조금이라도 다른 이미지가 들어가면 예측이 정상적으로 되지 않은 문제를 겪었다.

물론 해당 이미지를 학습하면 되어서 문제를 해결하였지만

모델은 오버피팅이 되어 정상적인 모델이 되지 않을 것이다.

이러한 문제를 해결 할려면 이미지 전처리 과정에서 모든 이미지를 같은 형태

즉, 숫자의 크기와 폰트를 똑같이 맞춰줘야 정상적인 학습과 예측이 될 것이라고 생각했다.


opencv의 다양한 함수들

rectangle, findContours

histogram equalization, threshold의 작은영역으로 변환하여 계산하는 과정

puttext 등

이미지의 입출력, 전처리의 다양한 방법, 영역찾기할 때 유용한 함수들을 많이 익힌 프로젝트 였다.

아쉬웠던 점은 이러한 함수들을 사용할 때 너무 input이미지에 맞는 하드코딩을 하게된 점이다.

이미지의 전처리를 같은 크기, 같은 형태로 만들면 이것도 큰 문제가 없을 것이라고 생각했고,

이 점으로 미루어 보아 이미지 처리나 계산할 때 전처리하는 과정이 매우 중요하다는 것을 깨달았다

또한, opencv말고 numpy관련함수들도 알게 되었다.

resize나 reshape로 dimensional변화나 매트릭스 크기늘리기 줄이기도 쉽게 할 수 있어 놀랐고,

mean이나 var로 한번에 분산 측정 중간값 측정이 되는것을 보고 라이브러리를

잘 이해하고 익혀야 된다는 것을 한번 더 실감하였다.

머신러닝 부분에서는 일단 간단하게 하기위하여 opencv에 내장되어있는 알고리즘을 사용하였는데,

실제로 사용할려면 tensorflow나 pytorch를 사용하여 더욱 정확한 학습 알고리즘을 적용시켜야 겠다.

또한 overfitting의 문제점을 확실히 느꼈으며 해결하기 위해 traindata를 많이 만들고,

전처리를 제대로 하고, 학습할 때 다양한 방법(ex) 이미지 회전하는 경우도 계산 등)으로

다른 이미지가 들어오더라도 정상적으로 검출하는 모델을 만들어야겠다고 느꼈다.

개인적으로 결과는 살짝 아쉽지만,

opencv와 numpy에 익숙하지 않았었는데 어느정도 익숙해졌고,

효율적으로 코딩하기 위해선 좋은 라이브러리라는 것을 깨닫게 해준 과제였다.